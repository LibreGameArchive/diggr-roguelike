

px Void->UInt :- get->Player->UInt(\x).
py Void->UInt :- get->Player->UInt(\y).  

def { x:UInt y:UInt dx:Int dy:Int } XyPair;
def [ a:UInt b:UInt c:Int d:Int ];


add XyPair->XyPair :- XyPair{ x=\x y=\y dx=(<:int(\x)+\dx:>) dy=(<:int(\y)+\dy:>) }.

walkable XyPair->Bool :-
  [ \x \y \dx \dy ] dg_neighbors_linked->Bool ? 
  [ (<:uint(\dx):>) (<:uint(\dy):>) ] dg_render_is_walkblock->Bool $not ? true;
  false
.

move [Int Int]->Void :-
  XyPair{ x=(px->UInt) y=(py->UInt) dx=\a dy=\b } add->XyPair->Void( 
    \\ walkable->Bool ? 
      [ \x \y (<:uint(\dx):>) (<:uint(\dy):>) ]->Void (
          get->Player {x=\c y=\d} set
          [ \a \b \c \d ] move_player))
.


go UInt->OutState :- OutState{ticks=(<: \v + 1u :>) done=false dead=false}.


/***/

<:: enums(literals)
    ident_here :- ident &''.    
    integer_here :- integer &''.
    enum :- spaces ident_here @' Void->Int :- ' spaces integer_here @'.' spaces.
    enums :- enum enums.
    enums :- .
::>

<:[enums] 

  key_up    14
  key_left  15 
  key_right 16
  key_down  17

  key_pageup   10
  key_pagedown 11
  key_end      12
  key_home     13

  key_kp1 35
  key_kp2 36
  key_kp3 37
  key_kp4 38
  key_kp5 39
  key_kp6 40
  key_kp7 41
  key_kp8 42
  key_kp9 43

  key_f9  58
  key_f10 59
  key_f11 60
  key_f12 61

:>

<:: switch(literals)
  ident_here :- ident &''.
  sym_here :- sym &''.
  case :- @'[\\v (' spaces ident_here spaces @'->Int)] $eq ?' sym_here spaces @';'.
  cases :- case cases.
  cases :- .
  switch :- @'->Sym(' cases @' fail)'.
::>

remap InState->InState :- 
  InState { vk=0 c=(\vk
  <:[switch]
    key_left  'h'
    key_down  'j'
    key_up    'k'
    key_right 'l'
   :>
   )}
  ; \\ .

/*
    libtcod.KEY_LEFT: 'h',
    libtcod.KEY_RIGHT: 'l',
    libtcod.KEY_UP: 'k',
    libtcod.KEY_DOWN: 'j',
    libtcod.KEY_HOME: 'y',
    libtcod.KEY_PAGEUP: 'u',
    libtcod.KEY_END: 'b',
    libtcod.KEY_PAGEDOWN: 'n',
    libtcod.KEY_KP4: 'h',
    libtcod.KEY_KP6: 'l',
    libtcod.KEY_KP8: 'k',
    libtcod.KEY_KP2: 'j',
    libtcod.KEY_KP7: 'y',
    libtcod.KEY_KP9: 'u',
    libtcod.KEY_KP1: 'b',
    libtcod.KEY_KP3: 'n'
*/

/***** *** *****/


handle_input InState->OutState :-

  \\ remap->InState->OutState (

  <: \c == 'S' :> ? OutState{ticks=\ticks done=true dead=false} ;
  <: \c == 'Q' :> ? OutState{ticks=\ticks done=true dead=true} ;
  <: \c == '.' :> ? \ticks go->OutState ;

  <: \c == 'h' :> ? [-1  0] move \ticks go->OutState ;
  <: \c == 'j' :> ? [ 0  1] move \ticks go->OutState;
  <: \c == 'k' :> ? [ 0 -1] move \ticks go->OutState;
  <: \c == 'l' :> ? [ 1  0] move \ticks go->OutState;
  <: \c == 'y' :> ? [-1 -1] move \ticks go->OutState;
  <: \c == 'u' :> ? [ 1 -1] move \ticks go->OutState;
  <: \c == 'b' :> ? [-1  1] move \ticks go->OutState;
  <: \c == 'n' :> ? [ 1  1] move \ticks go->OutState;

  OutState{ticks=\ticks done=false dead=false} 
  )
.


drawing_context Void->[UInt UInt] :-
  get->Player->[UInt UInt]([\x \y]).

