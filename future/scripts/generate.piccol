


switch_branch Sym->Void :- get->Dungeon { branch=\v is_quest=false } set.

is_quest     Void->Bool :- get->Dungeon->Bool( <:  \is_quest :>).
is_not_quest Void->Bool :- get->Dungeon->Bool( <: !\is_quest :>).

choose_branch Void->Void :-
  get->Dungeon->Void( <: \branch == nil :> ?
  [ 1 5 ] dg_random_range->Int->Void(
    <: \v == 1 :> ? 'a' switch_branch;
    <: \v == 2 :> ? 'b' switch_branch;
    <: \v == 3 :> ? 'c' switch_branch;
    <: \v == 4 :> ? 'd' switch_branch;
    <: \v == 5 :> ? 'e' switch_branch)
  )
.

branch Void->Sym :- get->Dungeon->Sym(\branch).

level Void->UInt :- get->Dungeon->UInt(\level).

/* TODO. */

quest_moncount Void->UInt :- 
  is_quest->Bool ? branch->Sym->UInt (
    <: \v == 'q' :> ? level->UInt->UInt ( 
       <: \v == 3u :> ? 1u ;
       <: \v == 4u :> ? 1u ;
       <: \v == 5u :> ? 2u ;
       <: \v == 6u :> ? 2u ;
       <: \v == 7u :> ? 3u ) ;
    <: \v == 'qk' :> ? 15u
  ).

quest_minlevel Void->UInt :- 
  is_quest->Bool ? branch->Sym->UInt (
    <: \v == 'q' :> ? 3u ;
    <: \v == 'qk' :> ? 8u
  ).

quest_maxlevel Void->UInt :- 
  is_quest->Bool ? branch->Sym->UInt (
    <: \v == 'q' :> ? 8u ;
    <: \v == 'qk' :> ? 11u
  ).


/* Monsters. */

def [ a:Sym b:Monster ];
def [ a:UInt b:UInt c:UInt ];
def [ a:MonsterKey b:UInt ];
def [ a:[UInt UInt] b:Sym ];

monster_level Void->UInt :-
  [ (level->UInt->Real(<: real(\v) :>)) 0.75 1u ] neg_gauss->UInt->UInt(
    [ \v (quest_minlevel->UInt) (quest_maxlevel->UInt) ]->UInt(
       <: \a < \b :> ? \b ;
       <: \a > \c :> ? \c ;
       \a
    ) ;
    \v )
.

get MonsterKey->Sym :-
  <: \level > 0u :> ? 
    \\->Sym(
      [ \\ (\\ size->UInt rand_n->UInt) ] get->Sym;
      \\ {level=(<: \level-1u :>)} get->Sym
    )
.

place_monster Sym->Void :- 
  [ (dg_grid_one_of_walk->[UInt UInt]) \\ ] -> Void(
    \a dg_grid_add_nogen
    [ (\a->UInt(\a)) (\a->UInt(\b)) \b ] set_monster 
  ).

generate_monsters UInt->Void :-
  <: \v == 0u :> ? ;
  MonsterKey{branch=(branch->Sym) level=(monster_level->UInt)} 
  get->Sym ->Bool (
       \\ place_monster
       \\ get->Monster->Bool(\inanimate)
   ) ? \v generate_monsters ; 
   <: \v - 1u :> generate_monsters
.

generate_monsters Void->Void :-
  quest_moncount->UInt generate_monsters ;
  [8f 1f 1u] neg_gauss->UInt generate_monsters
.

generate_mold Void->Void :-
  is_quest->Bool ? ;
  [ 0f 1f ] pos_gauss->Real ->Void(
     <: \v < 0f :> ? 
       MonsterKey{branch='x' level=(level->UInt)}
       get->Sym place_monster 
     ;
  ).


/* Grid and features. */


def [a:Sym b:Real];

generate_grid Void->Void :-
  dg_current_moon->Sym->Int(
     <: \v == 'new' || \v == 'full' :> ? 1;
     <: \v == 'first quarter' || \v == 'last quarter' :> ? -1;
     0)
  dg_grid_generate
.


def {xy:[UInt UInt] sym:Sym} XySym;

random_floor_feature Sym->Void :-
  XySym{ xy=(dg_grid_one_of_floor->[UInt UInt]) sym=\v}->Void(
    [ (\xy->UInt(\a)) (\xy->UInt(\b)) \sym ] set_feature)
.

random_water_feature Sym->Void :-
  XySym{ xy=(dg_grid_one_of_water->[UInt UInt]) sym=\v}->Void(
    [ (\xy->UInt(\a)) (\xy->UInt(\b)) \sym ] set_feature)
.

generate_founts UInt->Void :-
  <: \v > 0u :> ?
    [1 5] dg_random_range->Int
      ->Sym(
        <: \v == 1 :> ? 'C';
        <: \v == 2 :> ? 'V';
        <: \v == 3 :> ? 'B';
        <: \v == 4 :> ? 'N';
        <: \v == 5 :> ? 'M'
      ) random_water_feature
  <: \v - 1u :> generate_founts.

generate_feats Void->Void :-
  dg_grid_one_of_floor->[UInt UInt]->Void(
      [\a \b '>'] set_feature
      get->Dungeon {exit=([\a \b])} set
      [\a \b] dg_grid_add_nogen)
  fail; 
  dg_current_moon->Sym->Void(
      <: \v == 'new'  :> ? 'bb' random_floor_feature ;
      <: \v == 'full' :> ? 'dd' random_floor_feature ;
      [-1 1] dg_random_range->Int->Void(
          <: \v == -1 :> ? 's' random_floor_feature ;
          <: \v ==  0 :> ? 'b' random_floor_feature ;
          'v' random_floor_feature)
  )
  [ 3.0 1.0 0u ] pos_gauss->UInt->Void( \v generate_founts )
.


generate_map Void->Void :-
  dg__clear_map

  is_not_quest->Bool ?
    generate_grid
    generate_feats
    fail;

  dg_current_moon->Sym->Void(
    <: \v == 'full' :> ? [ 'gray' 0.6 ] dg_render_set_env;
    <: \v == 'new'  :> ? [ 'darkest_blue' 0.4 ] dg_render_set_env;
    [ 'white' 0f ] dg_render_set_env)
.


/* Player. */


place_player Void->Void :-
  dg_grid_one_of_walk->[UInt UInt]->Void(get->Player {x=\a y=\b} set)
.


/*** *** ***/


generate Void->Void :-

  choose_branch
  generate_map
  generate_monsters
  generate_mold
  place_player
.

