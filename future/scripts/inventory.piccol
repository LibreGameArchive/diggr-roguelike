
def [a:Int b:Sym];

def [a:[UInt UInt] b:UInt];


white Void->Sym :- 1 char->Sym.
gray Void->Sym :-  5 char->Sym.

<:: choose(literals,types)
   type_here :- spaces type &''.
   literal_here :- spaces literal &''.
   choose :- @'->' type_here @'(\\\\ ? ' literal_here @' ; ' literal_here @' )' spaces.
::>

slotname [Sym Bool]->Sym :-
  <:[case] \a :
    'a' ? \b <:[choose] Sym '      Head' 'head' :> ; 
    'b' ? \b <:[choose] Sym '      Neck' 'neck' :> ;
    'c' ? \b <:[choose] Sym '     Trunk' 'trunk' :> ;
    'd' ? \b <:[choose] Sym ' Left hand' 'left hand' :> ;
    'e' ? \b <:[choose] Sym 'Right hand' 'right hand' :> ;
    'f' ? \b <:[choose] Sym '      Legs' 'legs' :> ;
    'g' ? \b <:[choose] Sym '      Feet' 'feet' :> ;
    'h' ? \b <:[choose] Sym 'Backpack 1' 'backpack 1' :> ;
    'i' ? \b <:[choose] Sym 'Backpack 2' 'backpack 2' :> 
   :>
.

/*
fmt_slot Sym->Sym :-
  fmt
  gray->Sym fmt
  \\ fmt
  ') ' fmt
  [\\ true] slotname->Sym fmt
  ': ' fmt
  white->Sym fmt
  \\->Sym(\\ get->ItemVal fmt->Sym; 
        ' -') fmt
  fmt->Sym
.
*/

fmt_slot Sym->Sym :-
 <:[seq] fmt => 
         gray->Sym, \\, ') ', [\\ true] slotname->Sym, ': ', white->Sym, \\->Sym(\\ get->ItemVal fmt->Sym; ' -')
         => Sym
  :>
.

/*** ***/

inv_draw_floor [UInt UInt]->Void :-
  <: \a == \b :> ? ;
  <: \a > 5u :>   ? '(There are other items here; clear away the pile to see more)' dg_render_draw_window ;

  <:[seq] fmt => 
            gray->Sym, 
            <: \a + 106u :> char->Sym, ') ', 
            '            ',
            white->Sym, 
            [ [ (get->Player->x) (get->Player->y) ] \a ] get->ItemVal fmt->Sym
          => Sym :> dg_render_draw_window

  [ (<: \a + 1u :>) \b ] inv_draw_floor
.

inv_draw_floor Void->Void :-
  [ (get->Player->x) (get->Player->y) ] size->UInt->Void (
     <: \\ == 0u :> ? ;
     '' dg_render_draw_window
     'Items on the floor:' dg_render_draw_window
     '' dg_render_draw_window
     [0u \\] inv_draw_floor
  )
  ; 
.


inv_draw Void->Sym :-
  <:[seq] dg_render_draw_window =>      
      'a' fmt_slot->Sym, 
      'b' fmt_slot->Sym, 
      'c' fmt_slot->Sym, 
      'd' fmt_slot->Sym, 
      'e' fmt_slot->Sym, 
      'f' fmt_slot->Sym, 
      'g' fmt_slot->Sym, 
      'h' fmt_slot->Sym, 
      'i' fmt_slot->Sym,
      \\->Void( inv_draw_floor ) '',
      <:[seq] fmt => 'Character level: ', get->Player->level => Sym :>,
      <:[seq] fmt => '  Dungeon level: ', get->Dungeon->level => Sym :>
    => [Int Sym] :>
   ->Sym(\a remap->Sym ; \b)
.

inv_draw Void->Void :- inv_draw->Sym->Void().

