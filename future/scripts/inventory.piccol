
def [a:Int b:Sym];

def [a:UInt b:Sym];

def [a:[UInt UInt] b:UInt];

def [a:[UInt UInt] b:ItemVal c:UInt];

def [a:Sym b:ItemVal];

def [a:UInt b:ItemVal];


pxy Void->[UInt UInt] :- [ (get->Player->x) (get->Player->y) ].

/*** ***/

take [UInt ItemVal]->Void :-
  <:[seq] print => ' take imp1\n' :>
  [ (\b->item get->Item->slot) \b ] set ;
  <:[seq] print => ' take imp1\n' :>
  [ 'h' \b ] set ;
  <:[seq] print => ' take imp1\n' :>
  [ 'i' \b ] set.

take UInt->Void :- 
  <:[seq] print => '... take ', \\, '\n' :>
  [ \\ ([ (pxy->[UInt UInt]) \\ ] del->ItemVal) ] ->Void (
       <:[seq] print => '... take1\n' :>
       \\ take 
       <:[seq] print => '... take2\n' :>
     ;
       <:[seq] print => '... take oops\n' :>
       [ (pxy->[UInt UInt]) \b \a ] put
  ).

can_take UInt->Bool :-
  [ (pxy->[UInt UInt]) \\ ] get->ItemVal->item get->Item->slot get->ItemVal ->Void()
  'h' get->ItemVal ->Void()
  'i' get->ItemVal ->Void()
  false ;
  true.

/*** ***/

white Void->Sym :- 1 char->Sym.
gray Void->Sym :-  5 char->Sym.

<:: choose(literals,types)
   type_here :- spaces type &''.
   literal_here :- spaces literal &''.
   choose :- @'->' type_here @'(\\\\ ? ' literal_here @' ; ' literal_here @' )' spaces.
::>

slotname [Sym Bool]->Sym :-
  <:[case] \a :
    'a' ? \b <:[choose] Sym '      Head' 'head' :> ; 
    'b' ? \b <:[choose] Sym '      Neck' 'neck' :> ;
    'c' ? \b <:[choose] Sym '     Trunk' 'trunk' :> ;
    'd' ? \b <:[choose] Sym ' Left hand' 'left hand' :> ;
    'e' ? \b <:[choose] Sym 'Right hand' 'right hand' :> ;
    'f' ? \b <:[choose] Sym '      Legs' 'legs' :> ;
    'g' ? \b <:[choose] Sym '      Feet' 'feet' :> ;
    'h' ? \b <:[choose] Sym 'Backpack 1' 'backpack 1' :> ;
    'i' ? \b <:[choose] Sym 'Backpack 2' 'backpack 2' :> 
   :>
.

fmt_slot Sym->Sym :-
 <:[seq] fmt => 
         gray->Sym, \\, ') ', [\\ true] slotname->Sym, ': ', white->Sym, \\->Sym(\\ get->ItemVal fmt->Sym; ' -')
         => Sym
  :>
.

/*** ***/

floor_item_label UInt->Sym :-
  <:[seq] fmt => 
            gray->Sym, 
            <: \\ + 106u :> char->Sym, ') ', 
            '            ',
            white->Sym, 
            [ (pxy->[UInt UInt]) \\ ] get->ItemVal fmt->Sym
          => Sym :>
.

inv_draw_floor [UInt UInt]->Void :-
  <: \a == \b :> ? ;
  <: \a > 5u :>   ? '(There are other items here; clear away the pile to see more)' dg_render_draw_window ;
  \a floor_item_label->Sym dg_render_draw_window
  [ (<: \a + 1u :>) \b ] inv_draw_floor
.

inv_draw_floor Void->Void :-
  pxy->[UInt UInt] size->UInt->Void (
     <: \\ == 0u :> ? ;
     '' dg_render_draw_window
     'Items on the floor:' dg_render_draw_window
     '' dg_render_draw_window
     [0u \\] inv_draw_floor
  )
  ; 
.


inv_draw Void->Sym :-
  <:[seq] dg_render_draw_window =>      
      'a' fmt_slot->Sym, 
      'b' fmt_slot->Sym, 
      'c' fmt_slot->Sym, 
      'd' fmt_slot->Sym, 
      'e' fmt_slot->Sym, 
      'f' fmt_slot->Sym, 
      'g' fmt_slot->Sym, 
      'h' fmt_slot->Sym, 
      'i' fmt_slot->Sym,
      \\->Void( inv_draw_floor ) '',
      <:[seq] fmt => 'Character level: ', get->Player->level => Sym :>,
      <:[seq] fmt => '  Dungeon level: ', get->Dungeon->level => Sym :>
    => [Int Sym] :>
    ->Sym(\b)    
#   ->Sym(\a remap->Sym ; \b)
.


draw_floor_item_menu UInt->Sym :-
  \\ can_take->Bool ? 
      <:[seq] dg_render_draw_window => 
           '',
           \\ floor_item_label->Sym,
           '',
           't)             Take this item.'
         => [Int Sym] :>
    ->Sym(\b)
.
              
draw_floor_item_menu UInt->Void :-
  [ \\ (\\ draw_floor_item_menu->Sym) ]->Void(
     <:[case] \b :
         't' ? \a take
      :>
  ).

draw_item_menu Sym->Void :-
  <:[case] \\ :
    'a' ? ;
    'b' ? ;
    'c' ? ;
    'd' ? ;
    'e' ? ;
    'f' ? ;
    'g' ? ;
    'h' ? ;
    'i' ? ;

    'j' ? 0u draw_floor_item_menu ;
    'k' ? 1u draw_floor_item_menu ;
    'l' ? 2u draw_floor_item_menu ;
    'm' ? 3u draw_floor_item_menu ;
    'n' ? 4u draw_floor_item_menu
   :>
.

inv_draw Void->Void :- 
  inv_draw->Sym draw_item_menu.

inv_act_top Void->Void :-
  0u draw_floor_item_menu.

