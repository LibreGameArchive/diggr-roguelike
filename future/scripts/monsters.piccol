
def [a:Sym b:Monster];
def [a:[UInt UInt] b:MonsterVal];
def [a:MonsterVal b:Monster];
def [a:MonsterKey b:Sym c:UInt];


make [Sym Monster]->MonsterVal :-
  MonsterVal {species=\a}.

def {
  x: UInt
  y: UInt
  known_p: Bool
  px: UInt
  py: UInt
  fast: Bool
  range: UInt
  static: Bool
  boulder: Bool
  bld_delta: [Int Int]
  to_x: UInt
  to_y: UInt
} WalkData;

def {
  x: UInt
  y: UInt
  heatseeking: Bool
  px: UInt
  py: UInt
  dist: Real
  range: UInt
  p_is_water: Bool
} TargetData;

def [a:WalkData b:[UInt UInt]];
def [a:WalkData b:[Int Int]];
def [x:UInt y:UInt x2:UInt y2:UInt n:UInt range:UInt];
def [a:UInt b:UInt c:UInt d:UInt];
def [a:UInt b:UInt c:MonsterVal];
def [a:[UInt UInt] b:MonsterVal c:Monster];
def [a:MonsterVal b:TargetData];



walk_path WalkData->[UInt UInt] :-
  \known_p ? [ \x \y \px \py 
               (\fast->UInt(\\ ? 2u ; 1u)) 
               (<: \range * 2u :>) ] dg_render_path_walk->[UInt UInt]
.

walk_to [ WalkData [UInt UInt] ]->WalkData :-
  \a { to_x=(\b->a) to_y=(\b->b) }
.

walk_to [ WalkData [Int Int] ]->WalkData :-
  \a { to_x=([(\a->x) (\b->a)] add->UInt)
       to_y=([(\a->y) (\b->b)] add->UInt) }.


walk_to WalkData->WalkData :-
  [ \to_x \to_y (get->Player->x) (get->Player->y) ] ->Bool( <: \a == \c && \b == \d :> ) ? 
     [ \x \y ] monster_hits 
     \\ { to_x=\x to_y=\y } 
  ;
  [ \to_x \to_y ] dg_render_is_valid->Bool ?
    [ \to_x \to_y ] dg_render_is_walkblock->Bool $not ? 
      \\
  ;
  \\ { to_x=\x to_y=\y }
.

walk_rnd WalkData->[Int Int] :-
  \\->[Int Int](\fast ? [-2 2] ; [-1 1])->[Int Int](
      [ (\\ dg_random_range->Int) (\\ dg_random_range->Int) ])
.

walk WalkData->WalkData :-
  \static ? \\ { to_x=\x to_y=\y } ;
  \\ ->WalkData(
     \boulder ? [ \\ (\bld_delta)     ] walk_to->WalkData ;
     [ \\ (\\ walk_path->[UInt UInt]) ] walk_to->WalkData ;
     [ \\ (\\ walk_rnd->[Int Int])    ] walk_to->WalkData
  ) walk_to->WalkData
.

target [MonsterVal TargetData]->MonsterVal :-

  \b->Bool(<: \dist <= real(\range) && (!\heatseeking || !\p_is_water) :>) ? 
     \a { known_p=true known_pxy=[(\b->px) (\b->py)] }
  ;
     \a { known_p=false }
.


make [ [UInt UInt] MonsterVal ]->WalkData :-

  [ \a \b (\b->Monster(\species get->Monster)) ]->WalkData(

    WalkData{ x=(\a->a)
              y=(\a->b)
              known_p=(\b->known_p)
              px=(\b->known_pxy->a) 
              py=(\b->known_pxy->b)
              fast=(\c->fast) 
              range=(\c->range)
              static=(\c->static)
              boulder=(\c->boulder)
              bld_delta=(\b->bld_delta)
            }
   ).

make [ [UInt UInt] MonsterVal ]->TargetData :-

  [ \a \b (\b->Monster(\species get->Monster))]->TargetData(

    TargetData{ x=(\a->a)
                y=(\a->b)
                heatseeking=(\c->heatseeking)
                range=(\c->range)
                px=(get->Player->x)
                py=(get->Player->y)

              } ->TargetData(
                \\ { dist=([ \x \y \px \py ] dg_dist->Real)
                     p_is_water=([ \px \py ] dg_grid_is_water->Bool) }
              )
  ).


/*** ***/

walk [ [UInt UInt] MonsterVal ]->[UInt UInt] :-

  \\ make->WalkData walk->WalkData ->[UInt UInt]([ \to_x \to_y ])
.

check_alive MonsterVal->Void :-
  <: \hp > -3.0 :> ? .

target [ [UInt UInt] MonsterVal ]->MonsterVal :-

  [ \b (\\ make->TargetData) ] target->MonsterVal
.

fmt MonsterVal->Sym :- 
  [ \\ (\\->Monster(\species get->Monster)) ]->Sym(
     <:[seq] fmt =>
         \b->name,
         \a->Sym(<: \onfire > 0u :> ? ' (on fire)' ; '')
       => Sym :>
  ).

set_monster [UInt UInt Sym]->Void :-
  [ [\x \y] ([\v (\v get->Monster)] make->MonsterVal) ] -> Void(
    \\ set
    \a set_skin
  ).

remove_monster [ [UInt UInt] MonsterVal ]->Void :-
  [ (\b->MonsterKey(\species get->Monster make->MonsterKey)) (\b->species) 1u ] put
.

monster [UInt UInt]->Skin :-
  [\a \b] get->MonsterVal->Skin(\species get->Monster->skin).


