
def [a:UInt b:UInt c:MonsterVal];
def [a:UInt b:UInt c:UInt d:UInt];
def [a:Int b:Int c:Int d:Int];
def [a:[Int Int] b:MonsterVal];
def [a:[UInt UInt] b:MonsterVal];
def [a:Real b:UInt c:Real d:UInt];


def {
  monval: MonsterVal
  monster: Monster
  x: UInt
  y: UInt
} MvPt;

def [px:UInt py:UInt v:MvPt];
def [a:MvPt b:[Int Int]];
def [a:MvPt b:Real];
def [a:MvPt b:Real c:Real];

xy_diff [UInt UInt]->Int :-
  <: \a < \b :> ?  1 ;
  <: \a > \b :> ? -1 ;
  0.

xy_diff [ UInt UInt UInt UInt ]->[Int Int] :-
  [ ([\a \c] xy_diff->Int)
    ([\b \d] xy_diff->Int) ].

xy_clip Int->Int :-
  <: \\ < -1 :> ? -1 ;
  <: \\ >  1 :> ?  1 ;
  \\.

xy_add [ Int Int Int Int ]->[Int Int] :-
  [ (<: \a + \c :> xy_clip->Int)
    (<: \b + \d :> xy_clip->Int) ].

monster_hits MvPt->MvPt :-
  <:[seq] fmt => \monster->name, ' hits!' => Sym :> msg
  \\.

move_boulder [ [Int Int] MonsterVal]->MonsterVal :-
  \b { bld_delta=([ (\b->bld_delta->a)
                    (\b->bld_delta->b)
                    (\a->a)
                    (\a->b) ] xy_add->[Int Int]) }.

move_boulder [ UInt UInt MvPt ]->MvPt :-
  [ \v
    ([ \px \py (\v->x) (\v->y) ] xy_diff->[Int Int])
  ]->MvPt(
    \a { monval=([ \b (\a->monval) ] move_boulder->MonsterVal) }
  ).



/***** *****/

combat_roll [Real Real UInt]->Real :-
  <: \c == 0u :> ? \a ;
  [ ([ \a ([ 0f \b ] dg_random_uniform->Real)] ->Real(<: \a + \b :>))
    \b 
    (<: \c - 1u :>) ] combat_roll->Real.

combat_roll [Real UInt Real UInt]->Real :-
  [ ([ 0f \a \b ] combat_roll->Real)
    ([ 0f \c \d ] combat_roll->Real) ]->Real(

     <: \a - \b :> ->Real(<: \v < 0f :> ? 0f; \v)).

get_plev Void->UInt :-
  [ (get->Player->level) (int_bias->Int) ] add->UInt.

combat_roll Monster->Real :-
  [ (get_attack->Real) (get_plev->UInt) \attack \level ] combat_roll->Real.


damage [MvPt Real]->MonsterVal :-

  [ \a
    ([(\a->monval->hp) \b]->Real(<: \a - \b :>)) 
    \b ]->MonsterVal(
    
    \\->Void(
      <: \b <= -3.0 :> ? <:[seq] fmt => 'You killed ', \a->monster->name, '!'          => Sym :> msg ;
      <: \c > 4f :>    ? <:[seq] fmt => 'You mortally wound ', \a->monster->name, '!'  => Sym :> msg ;
      <: \c > 2f :>    ? <:[seq] fmt => 'You seriously wound ', \a->monster->name, '!' => Sym :> msg ;
      <: \c > 0.5 :>   ? <:[seq] fmt => 'You wound ', \a->monster->name, '.'           => Sym :> msg ;
      <: \c > 0f :>    ? <:[seq] fmt => 'You barely wound ', \a->monster->name, '.'    => Sym :> msg ;
                         <:[seq] fmt => 'You miss ', \a->monster->name, '.'            => Sym :> msg
    )

    \a->monval { hp=\b    
                 known_p=true
                 known_pxy=([ (get->Player->x) (get->Player->y) ])  }
    ).

player_hits MvPt->MvPt :-

  \monster->boulder ? [ (get->Player->x) (get->Player->y) \\ ] move_boulder->MvPt ->MvPt(
    <:[seq] fmt => 'You push ', \monster->name => Sym :> msg
    <:[seq] print => 'BBB ', \x, ' ', \y, ':', \monval->bld_delta->a, ' ', \monval->bld_delta->b, '\n' :>
    \\
  );

  \\ { monval=([ \\ (\monster combat_roll->Real) ] damage->MonsterVal) }
.

get MonsterValXY->MvPt :-
  MvPt{ x=\x y=\y monval=\mon monster=(\mon->species get->Monster) }.

/*** ***/

monster_hits MonsterValXY->MonsterVal :- 
  \\ get->MvPt monster_hits->MvPt->monval.

player_hits MonsterValXY->MonsterVal :-
  \\ get->MvPt player_hits->MvPt->monval.



