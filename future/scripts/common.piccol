
to Int->UInt :- <: uint(\v) :>.
to UInt->Int :- <: int(\v) :>.
to Real->UInt :- <: uint(\v) :>.
to UInt->Real :- <: real(\v) :>.
to Real->Int :- <: int(\v) :>.
to Int->Real :- <: real(\v) :>.


/***/


def { 
  x: UInt
  y: UInt 
} Player;

def {
  level: UInt
  branch: Sym
  is_quest: Bool
  exit: [UInt UInt]
} Dungeon;


def {
  ticks: UInt
  vk: Int
  c: Sym
} InState;

def {
  ticks: UInt
  done: Bool
  dead: Bool
  regenerate: Bool
} OutState;

/***/


def {
  char: Sym
  color: Sym

  back: Sym
  is_lit: Bool
  walkable: Bool
  visible: Bool
} Skin;

unset Void->Skin :- Skin{char=nil color=nil}.

char Int->Sym :- \v $to_sym.


/***/


def {
  confuse
  sticky
  pois2
  shootable
  v_shrine
  s_shrine
  healingfountain
  bb_shrine
  permanent
  warm
  b_shrine

  lightbonus: UInt
  explode: UInt
  stairs: Int

  poison: Real
  queasy: Real
  fire: Real

  name: Sym
  special: Sym
  branch: Sym
  sign: Sym
  resource: Sym
} FeatFlags;

def {
  flags: FeatFlags
  skin: Skin
} Feat;


/***/


def { mon:Sym timeout:UInt } Summon;
def { damage:Real timeout:UInt } TimedEffect;
def { moldid:UInt chance:UInt timeout:UInt } MoldEffect;
def { num:UInt timeout:UInt } NumEffect;

def { new: UInt 
      wax_c: UInt
      q1: UInt
      wax_g: UInt
      full: UInt
      wan_g: UInt
      q2: UInt
      wan_c: UInt
    } MoonDistrib;

def {
  branch: Sym
  level: UInt

} MonsterKey;

def {
  skin: Skin

  name: Sym
  branch: Sym
  level: UInt
  desc: Sym
  count: UInt

  flavor: Sym

  psyrange: UInt
  pointscontrib: UInt
  range: UInt
  blink_away: UInt
  attack: Real
  defence: Real
  psyattack: Real
  itemdrop: Sym
  align: Sym
  pointsfac: Real
  fleerange: UInt

  summon: Summon
  bloodsucker: TimedEffect
  moldspew: MoldEffect
  summononce: NumEffect
  raise_dead: NumEffect
  moon: MoonDistrib

  straightline
  fireimmune
  static
  confimmune
  no_exting
  inanimate
  explodeimmune
  flying
  sleepattack
  fast
  is_mold
  no_a
  boulder
  selfdestruct
  stoneeating
  slow
  hungerattack
  large
  radimmune
  poisimmune
  heatseeking

} Monster;

def {
  species: Sym

  xy: [UInt UInt]
  known_p: Bool
  known_pxy: [UInt UInt]
  do_move: Bool
  do_die: Bool
  hp: Real
  confused: UInt
  glued: UInt
  visible: Bool
  visible_old: Bool
  was_seen: Bool
  onfire: Bool
  bld_delta: [Int Int]
  fleetimeout: UInt
} MonsterVal; 


/***/

def { } ItemKey;


def {
  stddev: Real
  thold: Real
} GaussChance;

def {
  name: Sym
  desc: Sym
} Achievement;

def {
  mean: UInt
  stddev: UInt
} GaussNat;

def {
  mean: Real
  stddev: Real
} Gauss;

def {
  lo: UInt
  hi: UInt
} Range;

def {
 mon: Sym
 count: UInt
} SummonN;

def {
  one: Sym
  many: Sym
} ItemName;

def {
  skin: Skin
  slot: Sym
  rarity: UInt
  name: ItemName

  radius: UInt
  lightradius: UInt
  camorange: UInt
  throwrange: UInt
  telepathyrange: UInt
  liveexplode: UInt
  airfreshener: UInt
  count: UInt
  mapper: UInt
  stackrange: UInt
  jumprange: UInt
  doppel: UInt
  repelrange: UInt

  heatbonus: Real
  rangeattack: Real
  digbonus: Real
  defence: Real
  attack: Real

  healing: Gauss
  food: Gauss
  healingsleep: GaussNat
  selfdestruct: GaussNat
  confattack: GaussNat
  cursedchance: GaussChance
  ammochance: Range
  range: Range
  summon: SummonN
  winning: Achievement

  special: Sym
  craft: Sym
  desc: Sym
  resource: Sym
  align: Sym
  converts: Sym
  switch_moon: Sym

  trapcloud
  straightline
  wishing
  homing
  springy
  nodoz
  throwable
  sounding
  jinni
  explodeimmune
  detect_monsters
  psyimmune
  detect_items
  cooling
  digging
  ebola
  detector
  booze
  radexplode
  swampgas
  hide_count
  makestrap
  applies_in_slot
  explodes
  smoke
  glueimmune
  radimmune
  fires
  rangeexplode
  applies
  digray_x
  digray_y

} Item;

def {
  item: Sym
  
  count: UInt
  corpse: Sym
  ammo: Int
  tag: Bool
  cursed: Bool
  selfdestruct: UInt
  
} ItemVal;

/***/

def [a:Sym b:Bool];


def [a:UInt b:UInt c:UInt d:UInt];
def [x:UInt y:UInt v:Sym];
def [a:Real b:Real c:Real];
def [a:Real b:Real c:UInt];


/*** ***/

<:: print(literals)

  literal_here :- literal &''.
  print :- spaces literal_here @' print' print.
  print :- spaces @{ '\n' print}.
::>

<:: fmt_raw(literals)

  literal_here :- literal &''.
  fmt_x :- spaces literal_here @' fmt ' fmt_x.
  fmt_x :- spaces.
  fmt_raw :- fmt_x.
::>

<:: fmt(fmt_raw)
  fmt :- @' fmt ' fmt_raw @' fmt->Sym '.
::>

