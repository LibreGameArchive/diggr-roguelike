
depth_color UInt->[Sym Real]:-
  <:[case] \\ :
    1u ? [ 'white'            0.9 ];
    2u ? [ 'lightest_blue'    0.8 ]; 
    3u ? [ 'lighter_blue'     0.7 ];
    4u ? [ 'light_blue'       0.6 ];
    5u ? [ 'blue'             0.5 ];
    6u ? [ 'dark_blue'        0.4 ];
    7u ? [ 'darker_blue'      0.3 ];
    8u ? [ 'darkest_blue'     0.2 ];
  :>
  [ 'darkest_gray' 0.1 ].

set_env_color UInt->Void :-
  \\ depth_color->[Sym Real] dg_render_set_env.

generate UInt->[UInt UInt] :-
  0 dg_grid_generate
  \\ set_env_color
  dg_grid_one_of_walk->[UInt UInt].

water_color Real->[Sym Sym] :-
  <: \\ <= -8f :> ? [ 'darkest_sea'       'sea' ];
  <: \\ <= -6f :> ? [ 'turquoise'         'lightest_turquoise' ];
  <: \\ <= -4f :> ? [ 'darkest_cyan'      'cyan' ];
  <: \\ <= -2f :> ? [ 'sky'               'lightest_sky' ];
  <: \\ <=  0f :> ? [ 'darkest_azure'     'azure' ];
  <: \\ <=  2f :> ? [ 'blue'              'lightest_blue' ];
  <: \\ <=  4f :> ? [ 'darkest_han'       'han' ];
  <: \\ <=  6f :> ? [ 'violet'            'lightest_violet' ];
  [ 'darkest_purple' 'purple' ].

water Real->Skin :-
  \\ water_color->[Sym Sym]->Skin(
     Skin{ fore   = \a
           fore2  = \b
           fore_i = true
           is_terrain = false
           char   = (251u dg_uint_to_char->Sym) }
  ).

rock Real->Skin :-
  \\ water_color->[Sym Sym]->Skin(
     Skin{ fore = \b
           fore_i = false
           is_terrain = true
           char = (176u dg_uint_to_char->Sym) }
  ).

surface Real->Skin :-
  \\ water->Skin { is_terrain = true
                   char = (251u dg_uint_to_char->Sym) }.

player Void->Skin :-
  Skin { char='W' fore='white' }.

null Void->Skin :-
  Skin { char=(0u dg_uint_to_char->Sym) }.

def {
  x: UInt
  y: UInt
  depth: UInt
  height: Real
  maxheight: Real
  drawheight: Real
  not_ok: Bool
} HeightP;

max_height UInt->Real :-
  <: real(12 - int(\\) * 2) :>.

make [UInt UInt UInt]->HeightP :-
  <:[do] HeightP->HeightP
     x = \a,
     y = \b,
     depth = \c,
     height = [ \a \b ] dg_grid_get_height->Real,
     maxheight = \c max_height->Real
    =>
     drawheight = [ \height \maxheight ] max->Real,
     not_ok = [ \height \maxheight ]->Bool(<: \a > \b :>)
    =>
     \\
  :>.

make HeightP->Skin :-
  <: \depth == 1u :> ? \drawheight surface->Skin ;
  \not_ok ? \drawheight rock->Skin ;
  \drawheight water->Skin.

def {
  skin: Skin
  walkable: Bool
  visible: Bool
  is_lit: Bool
  back: Sym

  x: UInt
  y: UInt
  z: UInt

  depth: UInt

  heightp: HeightP

} ExtSkin;

set ExtSkin->Void :-
  [ \x \y \z \skin ] dg_render_set_skin
  [ \x \y \z (\walkable $not) ] dg_render_set_is_walkblock
  [ \x \y \z (\visible $not) ] dg_render_set_is_viewblock
  [ \x \y \z \back ] dg_render_set_back
  [ \x \y \z \is_lit ] dg_render_set_is_lit.

/*
*/

make [UInt UInt UInt]->ExtSkin :-
  ExtSkin{ x=\a 
           y=\b 
           depth=\c }
  ->ExtSkin( \\ { heightp=([\x \y \depth] make->HeightP) } ).

null [UInt UInt]->ExtSkin :-
  ExtSkin{ skin=(null->Skin {char='x'}) walkable=false visible=false back='black' x=\a y=\b z=0u }.

player ExtSkin->ExtSkin :-
  [ (get->Player->x) (get->Player->y) \x \y ]->Bool(<: \a == \c && \b == \d :>) ?
     \\ { skin=(player->Skin) visible=true walkable=true is_lit=true  z=1u } ;
     \\ { skin=(null->Skin)   visible=true walkable=true is_lit=false z=1u }.

grid ExtSkin->ExtSkin :-
  \\ { skin = (\heightp make->Skin)
       walkable = (\heightp->not_ok $not)
       visible = (\heightp->not_ok $not)
       back = (\depth->Sym(<: \\ == 1u :> ? 'darkest_blue' ; 'darkest_azure'))
       z = 0u }.


set_skin [UInt UInt UInt]->Void :- 
  \\ make->ExtSkin ->Void(
    \\ player->ExtSkin set
    \\ grid->ExtSkin set
  ) ;
  [ \a \b ] null->ExtSkin set.  

set_skins [UInt UInt UInt]->Void :-
  <: \b == 250u :> ? ;
  \\ set_skin 

  \\ ->[UInt UInt UInt]( <: \a == 799u :> ? 
        [ 0u (<: \b + 1u :>) \c ] ;
        [ (<: \a + 1u :>) \b \c ]
  ) set_skins.

drawing_context DrawingContext->DrawingContext :-
  \\ { lightradius = (get->Dungeon->depth->UInt( <: \\ == 1u :> ? 16u ; 8u )) 
       px = (get->Player->x)
       py = (get->Player->y) } ->DrawingContext(

     \\ { voff_x = (<: int(\px) - 40 :>)
          voff_y = (<: int(\py) - 12 :>) }
  ).



descend Void->Void :-
  get->Dungeon->Void(
    <: \depth < 10u :> ? \\ { depth=(<: \depth + 1u :>) } ->Void(
      \depth set_env_color
      \\ set
    ) ;
   'Maximum depth reached; you cannot dive any further.' msg fail
  ).

ascend Void->Void :-
  get->Dungeon->Void(
    <: \depth > 1u :> ? \\ { depth=(<: \depth - 1u :>) } ->Void(
      \depth set_env_color
      \\ set
    ) ;
   'You are already at the surface; you cannot fly!' msg fail
  ).


def {
  x: UInt
  y: UInt
  to_x: UInt
  to_y: UInt
  dx: Int
  dy: Int
} XyMove;

add [UInt Int]->UInt :- 
  <: int(\a) + \b :> -> UInt( <: \\ < 0 :> ? 0u ; <: uint(\\) :> ).

walkable XyMove->Bool :- 
  [ \x \y \to_x \to_y ] dg_neighbors_linked->Bool ?
  [ (\to_x) (\to_y) ] dg_render_is_walkblock->Bool $not ? 
    true ;
  false.

move XyMove->Void :-
  \\ walkable->Bool ? 
     get->Player { x=\to_x y=\to_y } set
     [ \x \y (get->Dungeon->depth) ] set_skin
     [ \to_x \to_y (get->Dungeon->depth) ] set_skin.

move [Int Int]->Void :-
  <:[do] XyMove->XyMove
     x = get->Player->x,
     y = get->Player->y,
     dx = \a,
     dy = \b
    =>
     to_x = [\x \dx] add->UInt,
     to_y = [\y \dy] add->UInt
    =>
     \\
   :> move.

  