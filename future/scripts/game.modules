
modules Void->Void :-

  'common.piccol' common  

  <:[module] init 'init.piccol'
             init Void->Void
   :>

  <:[module] random 'random.piccol'
             pos_gauss [Real Real]->Real
             neg_gauss [Real Real]->Real
             pos_gauss [Real Real UInt]->UInt
             neg_gauss [Real Real UInt]->UInt
             rand_n UInt->UInt
   :>

  <:[module] generate 'generate.piccol'
             generate Void->Void
   :>

  <:[module] skin 'skin.piccol'
             set_skin [UInt UInt]->Void
   :>

  <:[module] feats 'feats.piccol'
             init_featstock Void->Void
             set_feature [UInt UInt Sym]->Void
             feature [UInt UInt]->Skin
             get [UInt UInt]->FeatFlags
   :>

  <:[module] monsterstock 'monsterstock.piccol'
             init_monsterstock Void->Void
             make Monster->MonsterKey
   :>

  <:[module] itemstock 'itemstock.piccol'
             init_itemstock Void->Void
   :>

  <:[module] monsters 'monsters.piccol'
             monster [UInt UInt]->Skin
             set_monster [UInt UInt Sym]->Void
             remove_monster [ [UInt UInt] MonsterVal ]->Void

             walk [ [UInt UInt] MonsterVal ]->[UInt UInt]
             target [ [UInt UInt] MonsterVal ]->MonsterVal
             check_alive MonsterVal->Void

             fmt MonsterVal->Sym
   :>

  <:[module] items 'items.piccol'
             item [UInt UInt]->Skin
             set_item [UInt UInt Sym]->Void
             remove_item [ [UInt UInt] UInt ItemVal ]->Void
             nitems [UInt UInt]->UInt
             fmt ItemVal->Sym
   :>

  <:[module] input 'input.piccol'
             handle_input InState->OutState
             drawing_context Void->[UInt UInt]
   :>

  <:[module] world 'world.piccol'
             process_monster [ [UInt UInt] MonsterVal ]->[ [UInt UInt] MonsterVal ]
             process_world UInt->OutState
             monster_hits [UInt UInt]->Void
   :>

  <:[module] stats 'stats.piccol'
             luck Void->Real
   :>

  <:[module] output 'output.piccol'
             msg Sym->Void
             msg [Sym Bool]->Void
   :>
.
